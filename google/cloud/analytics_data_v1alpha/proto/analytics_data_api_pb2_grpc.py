# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.cloud.analytics_data_v1alpha.proto import (
    analytics_data_api_pb2 as google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2,
)


class AlphaAnalyticsDataStub(object):
    """Google Analytics reporting data service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunReport = channel.unary_unary(
            "/google.analytics.data.v1alpha.AlphaAnalyticsData/RunReport",
            request_serializer=google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.RunReportRequest.SerializeToString,
            response_deserializer=google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.RunReportResponse.FromString,
        )
        self.RunPivotReport = channel.unary_unary(
            "/google.analytics.data.v1alpha.AlphaAnalyticsData/RunPivotReport",
            request_serializer=google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.RunPivotReportRequest.SerializeToString,
            response_deserializer=google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.RunPivotReportResponse.FromString,
        )
        self.BatchRunReports = channel.unary_unary(
            "/google.analytics.data.v1alpha.AlphaAnalyticsData/BatchRunReports",
            request_serializer=google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.BatchRunReportsRequest.SerializeToString,
            response_deserializer=google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.BatchRunReportsResponse.FromString,
        )
        self.BatchRunPivotReports = channel.unary_unary(
            "/google.analytics.data.v1alpha.AlphaAnalyticsData/BatchRunPivotReports",
            request_serializer=google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.BatchRunPivotReportsRequest.SerializeToString,
            response_deserializer=google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.BatchRunPivotReportsResponse.FromString,
        )
        self.GetMetadata = channel.unary_unary(
            "/google.analytics.data.v1alpha.AlphaAnalyticsData/GetMetadata",
            request_serializer=google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.GetMetadataRequest.SerializeToString,
            response_deserializer=google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.Metadata.FromString,
        )


class AlphaAnalyticsDataServicer(object):
    """Google Analytics reporting data service.
    """

    def RunReport(self, request, context):
        """Returns a customized report of your Google Analytics event data. Reports
        contain statistics derived from data collected by the Google Analytics
        tracking code. The data returned from the API is as a table with columns
        for the requested dimensions and metrics. Metrics are individual
        measurements of user activity on your property, such as active users or
        event count. Dimensions break down metrics across some common criteria,
        such as country or event name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RunPivotReport(self, request, context):
        """Returns a customized pivot report of your Google Analytics event data.
        Pivot reports are more advanced and expressive formats than regular
        reports. In a pivot report, dimensions are only visible if they are
        included in a pivot. Multiple pivots can be specified to further dissect
        your data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def BatchRunReports(self, request, context):
        """Returns multiple reports in a batch. All reports must be for the same
        Entity.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def BatchRunPivotReports(self, request, context):
        """Returns multiple pivot reports in a batch. All reports must be for the same
        Entity.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetMetadata(self, request, context):
        """Returns metadata for dimensions and metrics available in reporting methods.
        Used to explore the dimensions and metrics. Dimensions and metrics will be
        mostly added over time, but renames and deletions may occur.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AlphaAnalyticsDataServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "RunReport": grpc.unary_unary_rpc_method_handler(
            servicer.RunReport,
            request_deserializer=google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.RunReportRequest.FromString,
            response_serializer=google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.RunReportResponse.SerializeToString,
        ),
        "RunPivotReport": grpc.unary_unary_rpc_method_handler(
            servicer.RunPivotReport,
            request_deserializer=google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.RunPivotReportRequest.FromString,
            response_serializer=google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.RunPivotReportResponse.SerializeToString,
        ),
        "BatchRunReports": grpc.unary_unary_rpc_method_handler(
            servicer.BatchRunReports,
            request_deserializer=google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.BatchRunReportsRequest.FromString,
            response_serializer=google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.BatchRunReportsResponse.SerializeToString,
        ),
        "BatchRunPivotReports": grpc.unary_unary_rpc_method_handler(
            servicer.BatchRunPivotReports,
            request_deserializer=google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.BatchRunPivotReportsRequest.FromString,
            response_serializer=google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.BatchRunPivotReportsResponse.SerializeToString,
        ),
        "GetMetadata": grpc.unary_unary_rpc_method_handler(
            servicer.GetMetadata,
            request_deserializer=google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.GetMetadataRequest.FromString,
            response_serializer=google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.Metadata.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "google.analytics.data.v1alpha.AlphaAnalyticsData", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class AlphaAnalyticsData(object):
    """Google Analytics reporting data service.
    """

    @staticmethod
    def RunReport(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/google.analytics.data.v1alpha.AlphaAnalyticsData/RunReport",
            google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.RunReportRequest.SerializeToString,
            google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.RunReportResponse.FromString,
            options,
            channel_credentials,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RunPivotReport(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/google.analytics.data.v1alpha.AlphaAnalyticsData/RunPivotReport",
            google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.RunPivotReportRequest.SerializeToString,
            google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.RunPivotReportResponse.FromString,
            options,
            channel_credentials,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def BatchRunReports(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/google.analytics.data.v1alpha.AlphaAnalyticsData/BatchRunReports",
            google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.BatchRunReportsRequest.SerializeToString,
            google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.BatchRunReportsResponse.FromString,
            options,
            channel_credentials,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def BatchRunPivotReports(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/google.analytics.data.v1alpha.AlphaAnalyticsData/BatchRunPivotReports",
            google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.BatchRunPivotReportsRequest.SerializeToString,
            google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.BatchRunPivotReportsResponse.FromString,
            options,
            channel_credentials,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetMetadata(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/google.analytics.data.v1alpha.AlphaAnalyticsData/GetMetadata",
            google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.GetMetadataRequest.SerializeToString,
            google_dot_cloud_dot_analytics__data__v1alpha_dot_proto_dot_analytics__data__api__pb2.Metadata.FromString,
            options,
            channel_credentials,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
